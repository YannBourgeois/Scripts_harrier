---
title: "Scripts for population genetics analyses of the Réunion harrier"
author: "YBourgeois"
date: "2023-10-05"
output: html_document
---

## Plotting DAPC results

```{r dapc1, include=TRUE}
#| warning: false
#| label: dapc1
#| error: false

PATH="~/Desktop/CurrentWORK/Harrier_project/Harrier_scripts_Github/"
##Edit this PATH variable so it points to the Github repository

setwd(paste(PATH,"Scripts_harrier/Landscape_genetics_scripts/",sep=""))


library(adegenet)
a<-read.PLINK("DAPC.raw", map.file = "DAPC.map", n.cores = 1)

###Identifying most likely number of clusters
#grp <- find.clusters(a,max.n.clust=5,n.pca=100)
### 2 clusters. You can test this yourself by uncommenting.

grp2 <- find.clusters(a,n.clust=2,n.pca=100)

###How many axes to keep
dapctest <- dapc(a, grp2$grp,n.da=2, n.pca=100)
temp1 <- optim.a.score(dapctest)
##Keep 1 PC axes (same for datasets with and without outgroups)
dapc2 <- dapc(a,grp2$grp,n.da=2, n.pca=1)

myCol <- c("green","red")
scatter(dapc2, col=myCol,scree.da=FALSE, bg="white", pch=20, cell=0, cstar=0, solid=.4,cex=3,clab=0, leg=TRUE)


write.table(dapc2$posterior,file="DAPC_2_clusters_final.txt",sep="\t",quote=F,col.names=F)

```

```{r dapc2, include=TRUE}
#| warning: false
#| error: false
library(tess3r)
library(maps)
library(ggplot2)
library(rworldmap)
library(rworldxtra)
library("rgdal") ## Defines functions to transform spatial elements

###map.polygon <- getMap(resolution = "high")
projection_none <- "+proj=longlat +datum=WGS84"
projection_mercator <- "+proj=merc +datum=WGS84"
load("REU_adm0.RData")
reu_obj<-gadm ; rm(gadm)

coords<-read.table("Info_samples_Coordinates_position_plink_files.txt",h=T)[,c(1,4,5)]
#File containing info about the name of the individual in the VCF, the coordinates, and the relative order in the ped files from PLINK

tmp<-cbind(as.data.frame(rownames(dapc2$posterior)),as.data.frame(dapc2$posterior))
colnames(tmp)<-c("ind","Cluster_1","Cluster_2")
DAPC<-merge(coords,tmp,by="ind")
q.matrix <- as.matrix(DAPC[,c(5,4)]) 
coords<-DAPC[,c(3,2)]
pl <- ggtess3Q(q.matrix, coords, map.polygon =  reu_obj)
pl +
  geom_path(data =  reu_obj, aes(x = long, y = lat, group = group)) +
    xlim(55,56) + 
  ylim(-21.5, -20.75) + 
  coord_equal() + 
  geom_point(data =DAPC,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data =DAPC, aes(x = LON, y = LAT,color=Cluster_1), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw() + scale_color_gradient2(midpoint=0.5, low="red", mid="white",high="green", space ="Lab" )

```

## Plotting ADMIXTURE results

```{r admix, include=TRUE}
#| warning: false
#| error: false

library(tess3r)
library(maps)
library(ggplot2)
library(rworldmap)
library(rworldxtra)
library("rgdal") ## Defines functions to transform spatial elements

###map.polygon <- getMap(resolution = "high")
projection_none <- "+proj=longlat +datum=WGS84"
projection_mercator <- "+proj=merc +datum=WGS84"
load("REU_adm0.RData")
reu_obj<-gadm ; rm(gadm)

admix<-read.table("ADMIXTURE_K2.txt")
colnames(admix)<-c("ind","Cluster_1","Cluster_2")
coords<-read.table("Info_samples_Coordinates_position_plink_files.txt",h=T)[,c(1,4,5)]
ADMIX<-merge(coords,admix,by="ind")
q.matrix <- as.matrix(ADMIX[,4:5])
coords<-ADMIX[,c(3,2)]
pl <- ggtess3Q(q.matrix, coords, map.polygon =  reu_obj)
pl +
  geom_path(data =  reu_obj, aes(x = long, y = lat, group = group)) +
    xlim(55,56) + 
  ylim(-21.5, -20.75) + 
  coord_equal() + 
  geom_point(data =ADMIX,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data =ADMIX, aes(x = LON, y = LAT,color=Cluster_1), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw() + scale_color_gradient2(midpoint=0.5, low="green", mid="white",high="red", space ="Lab" )



 
```

## Check spatial distribution of sex, age categories

This one is a sanity check to confirm that what we observe is not obviously related to sex or to the age structure of individuals.

```{r check, include=TRUE}
#| warning: false
#| error: false
table=read.table("Info_samples_Sex_Age.txt",h=T)
pl <- ggtess3Q(q.matrix, coords, map.polygon =  reu_obj) 
pl + geom_path(data =  reu_obj, aes(x = long, y = lat)) + xlim(55,56) + 
  ylim(-21.5, -20.75) + 
  coord_equal() + 
  geom_point(data =table,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data = table, aes(x = LON, y = LAT, color=SEXE), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw()



pl + geom_path(data =  reu_obj, aes(x = long, y = lat)) + xlim(55,56) + 
  ylim(-21.5, -20.75) + 
  coord_equal() + 
  geom_point(data =table,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data = table, aes(x = LON, y = LAT, color=AGE), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw()


```

## Estimate various F-statistics, Principal Component Analysis

```{r Fstats, include=TRUE}
#| warning: false
#| error: false

library(vcfR)
library(poppr)
library(ape)
library(RColorBrewer)


rubi.VCF <- read.vcfR("VCF_M5_N7_80pc.vcf")
pop.data <- DAPC

ind_vcf<-as.data.frame(colnames(rubi.VCF@gt)[-1])
colnames(ind_vcf)<-"ind"
pop.data2<-merge(ind_vcf,pop.data,by="ind")
pop.data<-pop.data2
all(colnames(rubi.VCF@gt)[-1] == pop.data$ind) ###OK

pop.data$pop<-ifelse(pop.data$Cluster_1<0.4,"Cluster_2","Cluster_1")
pop.data$pop<-ifelse(pop.data$Cluster_1<0.6 & pop.data$Cluster_1>0.4,"admixed",pop.data$pop)

```

We can also use these R packages to perform a Principal Component Analysis and check that it matches with DAPC/ADMIXTURE

```{r PCA, include=TRUE}
#| warning: false
#| error: false
pca.rubi <- vcfR2genlight(rubi.VCF)
ploidy(pca.rubi) <- 2

rubi.pca <- glPca(pca.rubi,nf=5)
barplot(100*rubi.pca$eig/sum(rubi.pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Percent of variance\nexplained", line = 2)
title(xlab="Eigenvalues", line = 1)

rubi.pca.scores <- as.data.frame(rubi.pca$scores)
rubi.pca.scores$ind=rownames(rubi.pca.scores)
rubi.pca.scores2<-merge(rubi.pca.scores,pop.data,by="ind")
rubi.pca.scores=rubi.pca.scores2


cols <- brewer.pal(n =3, name = "Dark2")

library(ggplot2)
set.seed(9)
p <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC2, colour=pop)) 
p <- p + geom_point(size=4)
p <- p + stat_ellipse(level = 0.95, size = 1)
p <- p + scale_color_manual(values = cols) 
p <- p + geom_hline(yintercept = 0) 
p <- p + geom_vline(xintercept = 0) 
p <- p + theme_bw()

p+labs(y= "PC2, 5.58% variance explained",x = "PC1, 8.15% variance explained")+theme(text = element_text(size=20))
```

```{r Fstats2, include=TRUE}
#| warning: false
#| error: false
## The following websites may be useful:
##https://cran.r-project.org/web/packages/hierfstat/vignettes/hierfstat.html
#https://www2.unil.ch/popgen/teaching/WISG17/import.pdf #To import

library(pegas)
library(hierfstat)
fn<-"VCF_M5_N7_80pc.vcf"
x.l<-VCFloci(fn)
base<-c("A","T","G","C")
snps<-which(x.l$REF %in% base & x.l$ALT %in% base)
x<-read.vcf(fn,which.loci=snps)


dat<-genind2hierfstat(loci2genind(x),pop=pop.data$pop)
##Reorder pop.data so the order of individuals match. with dat Then import again
pop.data=pop.data[match(rownames(dat), pop.data$ind), ]  
dat<-genind2hierfstat(loci2genind(x),pop=pop.data$pop)
all.equal(rownames(dat),as.character(pop.data$ind)) ##Should be TRUE

####Useful to inspect individual loci statistics
results_Fstats<-basic.stats(dat)
###For example, to get individual Fis:
FIS<-as.data.frame(results_Fstats$Fis) 



W_Cockerham<-pairwise.WCfst(dat)
W_Cockerham
#             admixed  Cluster_1  Cluster_2
# admixed           NA 0.02049046 0.02699966
# Cluster_1 0.02049046         NA 0.07733697
# Cluster_2 0.02699966 0.07733697         NA

###bootstraps and dosage needs numeric for pop ids. To edit so we can assign individuals better.

dat$pop<-ifelse(dat$pop=="Cluster_1",1,dat$pop)
dat$pop<-ifelse(dat$pop=="Cluster_2",2,dat$pop)
dat$pop<-ifelse(dat$pop=="admixed",3,dat$pop)

boot.ppfst(dat,n=1000)

fis.gt<-fis.dosage(fstat2dos(dat[,-1]),pop=dat[,1]) 
fis.gt

boot.ppfis(dat)
```

## Plotting EEMS results

To install the EEMS library, the following command can be used (Linux distribution)

```{r eems}
#| warning: false
#| error: false
setwd(paste(PATH,"Scripts_harrier/Landscape_genetics_scripts/EEMS",sep=""))


###Edit the PATH before starting anything.
#install.packages(c("Rcpp", "RcppEigen", "raster", "rgeos", "sp"))
##Sanity check
#if (dir.exists("rEEMSplots")) {
# install.packages("rEEMSplots", repos = NULL, type = "source")
# } else {
# stop("Move to the directory that contains the rEEMSplots source to install the package.")
# }
```

```{r eems2, include=FALSE}
#| warning: false
#| error: false
setwd(paste(PATH,"Scripts_harrier/Landscape_genetics_scripts/EEMS",sep=""))

library("rEEMSplots")
library("rgdal") ## Defines functions to transform spatial elements
library("rworldmap") ## Defines world 
load("../REU_adm0.RData")
reu_obj<-gadm ; rm(gadm)
plot(reu_obj)

coords=read.table("input/VCF_M5_N7_80pc.coord")
eems_results<-list("nDemes200-chain1")
name_figures <-list("nDemes200-chain1/plot")
eems.plots(mcmcpath = eems_results,
plotpath = paste0(name_figures, "-shapefile"),
longlat = FALSE, m.plot.xy = { plot(reu_obj, col = NA, add = TRUE); points(coords[,2:1],col="black",pch=16) }, q.plot.xy = { plot(reu_obj, col = NA, add = TRUE); points(coords[,2:1],col="black",pch=16) })

```

## Radish: estimate landscape resistivity

The first step consists in running a Principal Components Analysis on climatic data. Unfortunately, raw Météo France data (in ascii format, UTM coordinates, zone 40) are not supposed to be shared for free and are not provided here (next version of the manuscript should show results for Bioclim data to ensure full reproducibility). Instead we will use the bioclimatic data (https://www.worldclim.org/data/bioclim.html) that we derived from these data. Results are very similar with the published ones.

```{r spatial PCA}
#| warning: false
#| error: false
setwd(paste(PATH,"Scripts_harrier/Landscape_genetics_scripts/Bioclim",sep=""))


library(RStoolbox)
library(radish)
library(rgdal)
library(raster) 
library(RStoolbox)

####

function_rebuild = function(map){
common=raster("bio1.grd")
raster(vals=values(crop(raster(map),extent(common))),ext=extent(common),crs=crs(common),nrows=dim(common)[1],ncols=dim(common)[2])
}


files=list.files("./", pattern = "grd")
r <- lapply(files, function_rebuild) 
x <- do.call("stack",r) 
pca1 <- rasterPCA(scale(x))

coordinates=DAPC
cord.dec = SpatialPoints(cbind(coordinates$LON,coordinates$LAT),proj4string=CRS("+proj=longlat"))
coord_utm=spTransform(cord.dec, CRS("+init=epsg:32610 + south +zone=40"))
coordinates$LON=coord_utm@coords[,1]/100
coordinates$LAT=coord_utm@coords[,2]/100

  
  
 ggplot() +
  geom_raster(data =pca1$map, aes(x = x, y = y, fill = PC1)) +
  coord_equal() + 
  geom_point(data =coordinates,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data =coordinates, aes(x = LON, y = LAT,color=Cluster_1), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw() + scale_color_gradient2(midpoint=0.5, low="red", mid="white",high="green", space ="Lab" ) + scale_fill_gradient2(midpoint=0.5, low="red", mid="white",high="darkblue",na.value=adjustcolor("white",alpha.f=0.2), space ="Lab" )



 ggplot() +
  geom_raster(data =pca1$map, aes(x = x, y = y, fill = PC2)) +
  coord_equal() + 
  geom_point(data =coordinates,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data =coordinates, aes(x = LON, y = LAT,color=Cluster_1), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw() + scale_color_gradient2(midpoint=0.5, low="red", mid="white",high="green", space ="Lab" ) + scale_fill_gradient2(midpoint=0.5, low="red", mid="white",high="darkblue",na.value=adjustcolor("white",alpha.f=0.2), space ="Lab" )

 
writeRaster(pca1$map$PC1, filename="~/Desktop/CurrentWORK/Harrier_project/Harrier_scripts_Github/Scripts_harrier/Landscape_genetics_scripts/PC_grids_climate/PC1.grd", datatype='INT4S', overwrite=TRUE)
writeRaster(pca1$map$PC2, filename="~/Desktop/CurrentWORK/Harrier_project/Harrier_scripts_Github/Scripts_harrier/Landscape_genetics_scripts/PC_grids_climate/PC2.grd", datatype='INT4S', overwrite=TRUE)

```

We can now run the radish analysis. We need the maps with the PC projections, the coordinates (UTM), and a matrix of genetic distances.

```{r radish2}
#| warning: false
#| error: false
setwd(paste(PATH,"Scripts_harrier/Landscape_genetics_scripts/",sep=""))

files=c("PC_grids_climate/PC1.grd","PC_grids_climate/PC2.grd")
tmp <- lapply(files, raster) 
environment <- do.call("stack",tmp) 

genetic_distances=as.matrix(bitwise.dist(pca.rubi))

##Reorder coordinates so the order of individuals matches with the genetic distance matrix
coordinates=coordinates[match(rownames(genetic_distances), coordinates$ind), ]  
all.equal(rownames(genetic_distances),coordinates$ind) ##Should be TRUE

###We can plot the grid file we produced before
 ggplot() +
  geom_raster(data =environment, aes(x = x, y = y, fill = PC1)) +
  coord_equal() + 
  geom_point(data =coordinates,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data =coordinates, aes(x = LON, y = LAT,color=Cluster_1), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw() + scale_color_gradient2(midpoint=0.5, low="red", mid="white",high="green", space ="Lab" ) + scale_fill_gradient2(midpoint=0.5, low="red", mid="white",high="darkblue",na.value=adjustcolor("white",alpha.f=0.2), space ="Lab" )


spatial_coord=SpatialPoints(coordinates[,c(3,2)],proj4string=CRS("+init=epsg:32610 + south +zone=40"))
 
surface <- conductance_surface(environment,spatial_coord, directions = 8)
```

We can then fit the model.

```{r}
#| warning: false
#| error: false
####Radish MLPE model
fit_mlpe <- radish(genetic_distances ~ PC1 + PC2, surface, 
                   radish::loglinear_conductance, radish::mlpe)
summary(fit_mlpe)
```

```{r}
#| warning: false
#| error: false
# vizualisation:
plot(fitted(fit_mlpe, "distance"), genetic_distances, pch = 19,
     xlab = "Optimized resistance distance", ylab = "Genetic distance")

# visualise estimated conductance surface and asymptotic confidence intervals
fitted_conductance <- conductance(surface, fit_mlpe, quantile = 0.95)

 ggplot() +
  geom_raster(data =fitted_conductance, aes(x = x, y = y, fill = est)) +
  coord_equal() + 
  geom_point(data =coordinates,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data =coordinates, aes(x = LON, y = LAT,color=Cluster_1), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw() + scale_color_gradient2(midpoint=0.5, low="red", mid="white",high="green", space ="Lab" ) + scale_fill_gradient2(midpoint=1.25, low="darkblue", mid="white",high="red",na.value=adjustcolor("white",alpha.f=0.2), space ="Lab" )

```

We can then run a few model comparisons

```{r}
#| warning: false
#| error: false
# model selection:
# fit a reduced model without "PC2" covariate, and compare to 
# full model via a likelihood ratio test
fit_mlpe_reduced <- radish(genetic_distances ~ PC1, surface, 
                           radish::loglinear_conductance, radish::mlpe)
anova(fit_mlpe, fit_mlpe_reduced)

# test against null model of IBD
fit_mlpe_ibd <- radish(genetic_distances ~ 1, surface, 
                       radish::loglinear_conductance, radish::mlpe)
anova(fit_mlpe, fit_mlpe_ibd)


```

Now the same scripts, for the Generalized Wishart model

```{r radish}
#| warning: false
#| error: false
####Generalized Wishart model
fit_wishart <- radish(genetic_distances ~ PC1 + PC2, surface,nu=7955, 
                   radish::loglinear_conductance, radish::generalized_wishart)
summary(fit_wishart)
```

```{r}
#| warning: false
#| error: false
# vizualisation:
plot(fitted(fit_wishart, "distance"), genetic_distances, pch = 19,
     xlab = "Optimized resistance distance", ylab = "Genetic distance")

# visualise estimated conductance surface and asymptotic confidence intervals
fitted_conductance <- conductance(surface, fit_wishart, quantile = 0.95)


ggplot() +
  geom_raster(data =fitted_conductance, aes(x = x, y = y, fill = est)) +
  coord_equal() + 
  geom_point(data =coordinates,aes(x = LON, y = LAT), size = 4,color="black") + 
  geom_point(data =coordinates, aes(x = LON, y = LAT,color=Cluster_1), size = 2) + 
  xlab("Longitude") +
  ylab("Latitude") + 
  theme_bw() + scale_color_gradient2(midpoint=0.5, low="red", mid="white",high="green", space ="Lab" ) + scale_fill_gradient2(midpoint=1.5, low="darkblue", mid="white",high="red",na.value=adjustcolor("white",alpha.f=0.2), space ="Lab" )

```

We can then run a few model comparisons

```{r}
#| warning: false
#| error: false
fit_wishart_reduced <- radish(genetic_distances ~ PC1, surface,nu=7955, 
                           radish::loglinear_conductance, radish::generalized_wishart)
anova(fit_wishart, fit_wishart_reduced)

# test against null model of IBD
fit_wishart_ibd <- radish(genetic_distances ~ 1, surface,nu=7955, 
                       radish::loglinear_conductance, radish::generalized_wishart)
anova(fit_wishart, fit_wishart_ibd)
```
